{"version":3,"sources":["./src/app/models/enums.ts","./src/app/modules/harborcontrol/harborcontrol-routing.module.ts","./src/app/modules/harborcontrol/harborcontrol.module.ts","./src/app/modules/harborcontrol/harborcontrol/harborcontrol.component.ts","./src/app/modules/harborcontrol/harborcontrol/harborcontrol.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA,IAAY,SAIX;AAJD,WAAY,SAAS;IACjB,mDAAa;IACb,iDAAY;IACZ,mDAAa;AACjB,CAAC,EAJW,SAAS,KAAT,SAAS,QAIpB;AAED,IAAY,UAKX;AALD,WAAY,UAAU;IAClB,iDAAW;IACX,uDAAc;IACd,qDAAa;IACb,6DAAiB;AACrB,CAAC,EALW,UAAU,KAAV,UAAU,QAKrB;;;;;;;;;;;;;ACXD;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAyB;AACgB;AACc;AACvD,YAAY;AAEZ,wBAAwB;AACyD;;;AACjF,YAAY;AAEZ,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,6FAAsB;KAElC;CACF,CAAC;AAMK,MAAM,0BAA0B;;yGAA1B,0BAA0B;8KAA1B,0BAA0B,kBAH5B,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC9B,4DAAY;mIAEX,0BAA0B,uFAF3B,4DAAY;6FAEX,0BAA0B;cAJtC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAyB;AACgB;AACiB;AAC1D,YAAY;AAEZ,wBAAwB;AACoD;AACK;;AACjF,YAAY;AAWL,MAAM,mBAAmB;;kGAAnB,mBAAmB;gKAAnB,mBAAmB,kBALrB;YACP,kEAAY;YACZ,wFAA0B;SAC3B;mIAEU,mBAAmB,mBAP5B,6FAAsB,aAGtB,kEAAY;QACZ,wFAA0B;6FAGjB,mBAAmB;cAT/B,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,6FAAsB;iBACvB;gBACD,OAAO,EAAE;oBACP,kEAAY;oBACZ,wFAA0B;iBAC3B;aACF;;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAyB;AACyB;AACA;AAUW;;;;;;;ICsBjC,yEACI;IAAA,yEAAgB;IAAA,uDAA8B;IAAA,4DAAK;IACnD,qEAAI;IAAA,uDAAkB;IAAA,4DAAK;IAE3B,qEAAI;IAAA,uDAAkC;IAAA,4DAAK;IAC/C,4DAAK;;;;IAJe,0DAA8B;IAA9B,qGAA8B;IAC1C,0DAAkB;IAAlB,kFAAkB;IAElB,0DAAkC;IAAlC,yGAAkC;;;IAftD,0EACI;IAAA,4EACI;IAAA,4EACI;IAAA,qEACI;IAAA,yEAAyB;IAAA,oEAAS;IAAA,4DAAK;IACvC,yEAAyB;IAAA,4EAAiB;IAAA,4DAAK;IAE/C,yEAA0B;IAAA,qEAAU;IAAA,4DAAK;IAC7C,4DAAK;IACT,4DAAQ;IACR,yEACI;IAAA,0HACI;IAKR,4DAAQ;IACZ,4DAAQ;IACZ,4DAAM;;;IARsB,2DAA6B;IAA7B,oFAA6B;;;IAU7D,sEACI;IAAA,yEAAS;IAAA,uEAAO;IAAA,+EAAmB;IAAA,4DAAO;IAAA,4DAAS;IACvD,4DAAM;;ADjClB,YAAY;AAOL,MAAM,sBAAsB;IAMjC,YAAY;IAEZ,sBAAsB;IACtB,YACU,WAAwB,EACxB,WAAwB;QADxB,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QATlC,0BAA0B;QACnB,cAAS,GAAW,CAAC,CAAC;QAEtB,aAAQ,GAAW,EAAE,CAAC;IAOzB,CAAC;IACL,YAAY;IAEZ,yBAAyB;IAClB,QAAQ;QACb,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IACD,YAAY;IAEZ,wCAAwC;IACjC,YAAY;QACjB,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YAChD,IAAI,CAAC,SAAS,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAClF,CAAC,EAAE,KAAK,CAAC,EAAE;YACT,KAAK,CAAC,qCAAqC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,wBAAwB;IACxB,wBAAwB;IACjB,YAAY;QACjB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;YACnB,IAAI,KAAK,GAAG,IAAI,+DAAU,EAAE;iBACzB,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;YAErC,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;gBAC1D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC1C,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,KAAK,+DAAU,CAAC,UAAU,CAAC,EAAE;oBACpE,IAAI,CAAC,YAAY,EAAE,CAAC;iBACrB;YACH,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;gBACV,KAAK,CAAC,kCAAkC,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC,CAAC;SACL;aAAM;YACL,KAAK,CAAC,uCAAuC,CAAC;SAC/C;IAEH,CAAC;IAID,sBAAsB;IACf,aAAa,CAAC,MAAkB;QACrC,QAAQ,MAAM,EAAE;YACd,KAAK,+DAAU,CAAC,UAAU;gBACxB,OAAO,aAAa,CAAC;YACvB,KAAK,+DAAU,CAAC,OAAO;gBACrB,OAAO,UAAU,CAAC;YACpB,KAAK,+DAAU,CAAC,SAAS;gBACvB,OAAO,WAAW,CAAC;YACrB,KAAK,+DAAU,CAAC,aAAa;gBAC3B,OAAO,iCAAiC,CAAC;SAC5C;IACH,CAAC;IAED,oBAAoB;IACb,WAAW,CAAC,QAAmB;QACpC,QAAQ,QAAQ,EAAE;YAChB,KAAK,8DAAS,CAAC,SAAS;gBACtB,OAAO,YAAY,CAAC;YACtB,KAAK,8DAAS,CAAC,QAAQ;gBACrB,OAAO,UAAU,CAAC;YACpB,KAAK,8DAAS,CAAC,SAAS;gBACtB,OAAO,WAAW,CAAC;SACtB;IACH,CAAC;IAED,qBAAqB;IACd,OAAO;QACZ,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IACD,YAAY;IAEZ,yBAAyB;IACzB,iDAAiD;IACzC,YAAY;QAClB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,KAAK,+DAAU,CAAC,OAAO,CAAC,CAAC;QACxE,IAAI,IAAI,CAAC,QAAQ,KAAK,8DAAS,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,IAAI,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE;YACxF,IAAI,CAAC,UAAU,GAAG,+DAAU,CAAC,aAAa,CAAC;YAC3C,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;aAAM;YACL,IAAI,CAAC,UAAU,GAAG,+DAAU,CAAC,UAAU,CAAC;YACxC,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,UAAU,GAAG,+DAAU,CAAC,SAAS,CAAC;gBACvC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,KAAK,+DAAU,CAAC,OAAO,CAAC,EAAE;oBAChE,IAAI,CAAC,YAAY,EAAE,CAAC;iBACrB;YACH,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;SAC1B;IACH,CAAC;;4FAtGU,sBAAsB;sGAAtB,sBAAsB;QCpBnC,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,sEACI;QAAA,uEAAO;QAAA,yEAAS;QAAA,iFAAqB;QAAA,4DAAS;QAAC,uDAAqB;QAAA,4DAAO;QAC3E,4EACI;QADiC,8IAAS,aAAS,IAAC;QACpD,mEAAgD;QAChD,qEACJ;QAAA,4DAAS;QACb,4DAAM;QACV,4DAAM;QAEN,0EACI;QAAA,0EAAS;QAAA,wEAAM;QAAA,iGAAqC;QAAA,4DAAO;QAAA,4DAAS;QACpE,4EACA;QADsD,0LAAmB;QAAzE,4DACA;QAAA,6EACI;QADiC,+IAAS,kBAAc,IAAC;QACzD,mEAA6C;QAC7C,sEACJ;QAAA,4DAAS;QACb,4DAAM;QAEN,0EACI;QAAA,qHACI;QAmBR,4DAAM;QACN,qHACI;QAGR,4DAAM;QACV,4DAAM;QACV,4DAAM;;QA7C6D,0DAAqB;QAArB,8FAAqB;QAUlB,0DAAmB;QAAnB,8EAAmB;QAQlD,0DAA2B;QAA3B,yFAA2B;QAqBjD,0DAA4B;QAA5B,0FAA4B;;6FDxBhC,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C","file":"modules-harborcontrol-harborcontrol-module-es2015.js","sourcesContent":["export enum BoatTypes {\n    CargoShip = 1,\n    SailBoat = 2,\n    SpeedBoat = 3\n}\n\nexport enum BoatStatus {\n    InQueue = 1,\n    InProgress = 2,\n    Completed = 3,\n    CannotProcess = 4\n}","//#region Angular Imports\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n//#endregion\n\n//#region Harbor Imports\nimport { HarborControlComponent } from './harborcontrol/harborcontrol.component';\n//#endregion\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HarborControlComponent\n\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HarborcontrolRoutingModule { }\n","//#region Angular Imports\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\n//#endregion\n\n//#region Harbor Imports\nimport { HarborcontrolRoutingModule } from './harborcontrol-routing.module';\nimport { HarborControlComponent } from './harborcontrol/harborcontrol.component';\n//#endregion\n\n@NgModule({\n  declarations: [\n    HarborControlComponent\n  ],\n  imports: [\n    SharedModule,\n    HarborcontrolRoutingModule\n  ]\n})\nexport class HarborcontrolModule { }\n","//#region Angular Imports\nimport { Component, OnInit } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\n//#endregion\n\n//#region service Imports\nimport { WindService } from 'src/app/cores/Services/wind/wind.service';\nimport { BoatService } from 'src/app/cores/Services/boat/boat.service';\n//#endregion\n\n//#region model Imports\nimport { Boat } from 'src/app/cores/Services/boat/boat.model';\nimport { BoatTypes, BoatStatus } from 'src/app/models/enums';\n//#endregion\n\n@Component({\n  selector: 'app-harborcontrol',\n  templateUrl: './harborcontrol.component.html',\n  styleUrls: ['./harborcontrol.component.scss']\n})\nexport class HarborControlComponent implements OnInit {\n\n  //#region Public Variables\n  public windSpeed: number = 0;\n  public count: number;\n  public boatList: Boat[] = [];\n  //#endregion\n\n  //#region  Constructor\n  constructor(\n    private windService: WindService,\n    private boatService: BoatService\n  ) { }\n  //#endregion\n\n  //#region  Angular Events\n  public ngOnInit(): void {\n    this.getWindSpeed();\n  }\n  //#endregion\n\n  // Get wind speed using open weather api\n  public getWindSpeed(): void {\n    this.windService.getWindDetails().subscribe(res => {\n      this.windSpeed = +parseFloat(String((res['wind']['speed'] * 18) / 5)).toFixed(2)\n    }, error => {\n      alert('Error while getting the wind speed.');\n    });\n  }\n\n  //#region public methods\n  // Generate random boats\n  public generateBoat(): void {\n    if (+this.count > 0) {\n      let parms = new HttpParams()\n        .append('count', `${+this.count}`);\n\n      this.boatService.generateRandomBoats(parms).subscribe(res => {\n        this.boatList = this.boatList.concat(res);\n        this.count = undefined;\n        if (!this.boatList.some(x => x.boatStatus === BoatStatus.InProgress)) {\n          this.processBoats();\n        }\n      }, (error => {\n        alert('Error while generating the boats');\n      }));\n    } else {\n      alert('Please Enter a number greater than 0.')\n    }\n\n  }\n\n  \n\n  // getting boat status\n  public getBoatStatus(status: BoatStatus): string {\n    switch (status) {\n      case BoatStatus.InProgress:\n        return 'In Progress';\n      case BoatStatus.InQueue:\n        return 'In Queue';\n      case BoatStatus.Completed:\n        return 'Completed';\n      case BoatStatus.CannotProcess:\n        return 'You can not enter in perimeter.';\n    }\n  }\n\n  // Getting boat type\n  public getBoatType(boatType: BoatTypes): string {\n    switch (boatType) {\n      case BoatTypes.CargoShip:\n        return 'Cargo Ship';\n      case BoatTypes.SailBoat:\n        return 'Sailboat';\n      case BoatTypes.SpeedBoat:\n        return 'Speedboat';\n    }\n  }\n\n  // Refresh wind speed\n  public refresh(): void {\n    this.getWindSpeed();\n  }\n  //#endregion\n\n  //#region Private Methods\n  // Method which allow boats to enter in perimeter\n  private processBoats(): void {\n    let boat = this.boatList.find(x => x.boatStatus === BoatStatus.InQueue);\n    if (boat.boatType === BoatTypes.SailBoat && (this.windSpeed < 10 || this.windSpeed > 30)) {\n      boat.boatStatus = BoatStatus.CannotProcess;\n      this.processBoats();\n    } else {\n      boat.boatStatus = BoatStatus.InProgress;\n      setTimeout(() => {\n        boat.boatStatus = BoatStatus.Completed;\n        if (this.boatList.some(x => x.boatStatus === BoatStatus.InQueue)) {\n          this.processBoats();\n        }\n      }, boat.duration * 1000);\n    }\n  }\n  //#endregion\n\n  \n  \n}\n","<div class=\"wrapper\">\n    <div class=\"card col-lg-12 mt-2\">\n        <div class=\"card-body\">\n            <div class=\"row col-lg-12\">\n                <div>\n                    <span> <strong> Current Wind Speed : </strong> {{ windSpeed }} kmph </span>\n                    <button class=\"btn btn-primary ml-2\" (click)=\"refresh()\">\n                        <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n                        Refresh\n                    </button>\n                </div>\n            </div>\n\n            <div class=\"row col-lg-12 mt-3\">\n                <strong> <span>Enter the number of boats to generate</span></strong>\n                <input type=\"text\" class=\"form-control col-lg-2 ml-2\" [(ngModel)]=\"count\">\n                <button class=\"btn btn-primary ml-2\" (click)=\"generateBoat()\">\n                    <i class=\"fa fa-ship\" aria-hidden=\"true\"></i>\n                    Generate\n                </button>\n            </div>\n\n            <div class=\"row col-lg-12 mt-3\">\n                <div class=\"col-lg-12\" *ngIf=\"boatList.length > 0\">\n                    <table mdbTable class=\"table col-lg-12\" striped=\"true\">\n                        <thead class=\"black white-text\">\n                            <tr>\n                                <th scope=\"col col-lg-3\">Boat Type</th>\n                                <th scope=\"col col-lg-3\">Boat Speed (KM/h)</th>\n                                <!-- <th scope=\"col col-lg-2\">Duration(In Seconds)</th> -->\n                                <th scope=\"col col-lg-4 \">BoatStatus</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr mdbTableCol *ngFor=\"let boat of boatList\">\n                                <th scope=\"row\">{{getBoatType(boat.boatType)}}</th>\n                                <td>{{boat.boatSpeed}}</td>\n                                <!-- <td>{{boat.duration}}</td> -->\n                                <td>{{getBoatStatus(boat.boatStatus)}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div *ngIf=\"boatList.length == 0\">\n                <strong> <span> There are no boats.</span></strong>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n"],"sourceRoot":"webpack:///"}