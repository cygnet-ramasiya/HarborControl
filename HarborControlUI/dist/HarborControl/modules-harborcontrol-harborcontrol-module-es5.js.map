{"version":3,"sources":["webpack:///src/app/models/enums.ts","webpack:///src/app/modules/harborcontrol/harborcontrol-routing.module.ts","webpack:///src/app/modules/harborcontrol/harborcontrol.module.ts","webpack:///src/app/modules/harborcontrol/harborcontrol/harborcontrol.component.ts","webpack:///src/app/modules/harborcontrol/harborcontrol/harborcontrol.component.html"],"names":["BoatTypes","BoatStatus","routes","path","component","HarborcontrolRoutingModule","forChild","imports","exports","HarborcontrolModule","declarations","HarborControlComponent","windService","boatService","windSpeed","boatList","getWindSpeed","getWindDetails","subscribe","res","parseFloat","String","toFixed","error","alert","count","parms","append","generateRandomBoats","concat","undefined","some","x","boatStatus","InProgress","processBoats","status","InQueue","Completed","CannotProcess","boatType","CargoShip","SailBoat","SpeedBoat","boat","find","setTimeout","duration","refresh","generateBoat","selector","templateUrl","styleUrls"],"mappings":"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","file":"modules-harborcontrol-harborcontrol-module-es5.js","sourcesContent":["export enum BoatTypes {\n    CargoShip = 1,\n    SailBoat = 2,\n    SpeedBoat = 3\n}\n\nexport enum BoatStatus {\n    InQueue = 1,\n    InProgress = 2,\n    Completed = 3,\n    CannotProcess = 4\n}","//#region Angular Imports\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n//#endregion\n\n//#region Harbor Imports\nimport { HarborControlComponent } from './harborcontrol/harborcontrol.component';\n//#endregion\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HarborControlComponent\n\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HarborcontrolRoutingModule { }\n","//#region Angular Imports\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\n//#endregion\n\n//#region Harbor Imports\nimport { HarborcontrolRoutingModule } from './harborcontrol-routing.module';\nimport { HarborControlComponent } from './harborcontrol/harborcontrol.component';\n//#endregion\n\n@NgModule({\n  declarations: [\n    HarborControlComponent\n  ],\n  imports: [\n    SharedModule,\n    HarborcontrolRoutingModule\n  ]\n})\nexport class HarborcontrolModule { }\n","//#region Angular Imports\nimport { Component, OnInit } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\n//#endregion\n\n//#region service Imports\nimport { WindService } from 'src/app/cores/Services/wind/wind.service';\nimport { BoatService } from 'src/app/cores/Services/boat/boat.service';\n//#endregion\n\n//#region model Imports\nimport { Boat } from 'src/app/cores/Services/boat/boat.model';\nimport { BoatTypes, BoatStatus } from 'src/app/models/enums';\n//#endregion\n\n@Component({\n  selector: 'app-harborcontrol',\n  templateUrl: './harborcontrol.component.html',\n  styleUrls: ['./harborcontrol.component.scss']\n})\nexport class HarborControlComponent implements OnInit {\n\n  //#region Public Variables\n  public windSpeed: number = 0;\n  public count: number;\n  public boatList: Boat[] = [];\n  //#endregion\n\n  //#region  Constructor\n  constructor(\n    private windService: WindService,\n    private boatService: BoatService\n  ) { }\n  //#endregion\n\n  //#region  Angular Events\n  public ngOnInit(): void {\n    this.getWindSpeed();\n  }\n  //#endregion\n\n  // Get wind speed using open weather api\n  public getWindSpeed(): void {\n    this.windService.getWindDetails().subscribe(res => {\n      this.windSpeed = +parseFloat(String((res['wind']['speed'] * 18) / 5)).toFixed(2)\n    }, error => {\n      alert('Error while getting the wind speed.');\n    });\n  }\n\n  //#region public methods\n  // Generate random boats\n  public generateBoat(): void {\n    if (+this.count > 0) {\n      let parms = new HttpParams()\n        .append('count', `${+this.count}`);\n\n      this.boatService.generateRandomBoats(parms).subscribe(res => {\n        this.boatList = this.boatList.concat(res);\n        this.count = undefined;\n        if (!this.boatList.some(x => x.boatStatus === BoatStatus.InProgress)) {\n          this.processBoats();\n        }\n      }, (error => {\n        alert('Error while generating the boats');\n      }));\n    } else {\n      alert('Please Enter a number greater than 0.')\n    }\n\n  }\n\n  \n\n  // getting boat status\n  public getBoatStatus(status: BoatStatus): string {\n    switch (status) {\n      case BoatStatus.InProgress:\n        return 'In Progress';\n      case BoatStatus.InQueue:\n        return 'In Queue';\n      case BoatStatus.Completed:\n        return 'Completed';\n      case BoatStatus.CannotProcess:\n        return 'You can not enter in perimeter.';\n    }\n  }\n\n  // Getting boat type\n  public getBoatType(boatType: BoatTypes): string {\n    switch (boatType) {\n      case BoatTypes.CargoShip:\n        return 'Cargo Ship';\n      case BoatTypes.SailBoat:\n        return 'Sailboat';\n      case BoatTypes.SpeedBoat:\n        return 'Speedboat';\n    }\n  }\n\n  // Refresh wind speed\n  public refresh(): void {\n    this.getWindSpeed();\n  }\n  //#endregion\n\n  //#region Private Methods\n  // Method which allow boats to enter in perimeter\n  private processBoats(): void {\n    let boat = this.boatList.find(x => x.boatStatus === BoatStatus.InQueue);\n    if (boat.boatType === BoatTypes.SailBoat && (this.windSpeed < 10 || this.windSpeed > 30)) {\n      boat.boatStatus = BoatStatus.CannotProcess;\n      this.processBoats();\n    } else {\n      boat.boatStatus = BoatStatus.InProgress;\n      setTimeout(() => {\n        boat.boatStatus = BoatStatus.Completed;\n        if (this.boatList.some(x => x.boatStatus === BoatStatus.InQueue)) {\n          this.processBoats();\n        }\n      }, boat.duration * 1000);\n    }\n  }\n  //#endregion\n\n  \n  \n}\n","<div class=\"wrapper\">\n    <div class=\"card col-lg-12 mt-2\">\n        <div class=\"card-body\">\n            <div class=\"row col-lg-12\">\n                <div>\n                    <span> <strong> Current Wind Speed : </strong> {{ windSpeed }} kmph </span>\n                    <button class=\"btn btn-primary ml-2\" (click)=\"refresh()\">\n                        <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n                        Refresh\n                    </button>\n                </div>\n            </div>\n\n            <div class=\"row col-lg-12 mt-3\">\n                <strong> <span>Enter the number of boats to generate</span></strong>\n                <input type=\"text\" class=\"form-control col-lg-2 ml-2\" [(ngModel)]=\"count\">\n                <button class=\"btn btn-primary ml-2\" (click)=\"generateBoat()\">\n                    <i class=\"fa fa-ship\" aria-hidden=\"true\"></i>\n                    Generate\n                </button>\n            </div>\n\n            <div class=\"row col-lg-12 mt-3\">\n                <div class=\"col-lg-12\" *ngIf=\"boatList.length > 0\">\n                    <table mdbTable class=\"table col-lg-12\" striped=\"true\">\n                        <thead class=\"black white-text\">\n                            <tr>\n                                <th scope=\"col col-lg-3\">Boat Type</th>\n                                <th scope=\"col col-lg-3\">Boat Speed (KM/h)</th>\n                                <!-- <th scope=\"col col-lg-2\">Duration(In Seconds)</th> -->\n                                <th scope=\"col col-lg-4 \">BoatStatus</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr mdbTableCol *ngFor=\"let boat of boatList\">\n                                <th scope=\"row\">{{getBoatType(boat.boatType)}}</th>\n                                <td>{{boat.boatSpeed}}</td>\n                                <!-- <td>{{boat.duration}}</td> -->\n                                <td>{{getBoatStatus(boat.boatStatus)}}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div *ngIf=\"boatList.length == 0\">\n                <strong> <span> There are no boats.</span></strong>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n"]}